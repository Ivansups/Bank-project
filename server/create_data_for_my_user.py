#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∞—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""

import asyncio
import uuid
import random
import os
from datetime import datetime, timedelta
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker
from sqlalchemy import text

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
DATABASE_URL = "postgresql+asyncpg://bank_user:bank_password@localhost:5432/bank_db"

# –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ –∏ —Å–µ—Å—Å–∏—é
engine = create_async_engine(DATABASE_URL, echo=True)
AsyncSessionLocal = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)

async def create_data_for_my_user(db: AsyncSession):
    """–°–æ–∑–¥–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω - –≤—ã)
    result = await db.execute(
        text("SELECT id, name, email, yandex_id FROM users")
    )
    users = result.fetchall()
    
    if not users:
        print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        print("üí° –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É —á–µ—Ä–µ–∑ Yandex OAuth")
        return False
    
    if len(users) > 1:
        print(f"‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω")
        print("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:")
        for user in users:
            print(f"  - {user[1]} ({user[2]}) - Yandex ID: {user[3]}")
        print()
        print("üí° –û—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞")
        return False
    
    user = users[0]
    user_id, name, email, yandex_id = user
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω –≤–∞—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {name} ({email}) - Yandex ID: {yandex_id}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
    amounts = [
        5000, 15000, 25000, 50000, 75000, 100000, 150000, 200000, 300000, 500000, 
        750000, 1000000, 1500000, 2000000, 3000000
    ]
    
    created_cards = 0
    
    for i, amount in enumerate(amounts):
        days_ago = random.randint(1, 365)
        created_date = datetime.utcnow() - timedelta(days=days_ago)
        
        card_id = str(uuid.uuid4())
        
        await db.execute(
            text("""
                INSERT INTO cards (id, amount, user_id, "createdAt", "updatedAt")
                VALUES (:id, :amount, :user_id, :createdAt, :updatedAt)
            """),
            {
                "id": card_id,
                "amount": amount,
                "user_id": user_id,
                "createdAt": created_date,
                "updatedAt": created_date
            }
        )
        
        created_cards += 1
        print(f"üìÑ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ #{i+1}: {amount:,} —Ä—É–± (—Å–æ–∑–¥–∞–Ω–∞ {created_date.strftime('%d.%m.%Y')})")
    
    await db.commit()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º updatedAt –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ (–∏–º–∏—Ç–∏—Ä—É–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏)
    result = await db.execute(
        text("SELECT id FROM cards WHERE user_id = :user_id ORDER BY RANDOM() LIMIT 5"),
        {"user_id": user_id}
    )
    recent_cards = result.fetchall()
    
    for card in recent_cards:
        await db.execute(
            text('UPDATE cards SET "updatedAt" = :updatedAt WHERE id = :id'),
            {
                "id": card[0],
                "updatedAt": datetime.utcnow() - timedelta(days=random.randint(1, 7))
            }
        )
    
    await db.commit()
    
    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    transaction_types = ["deposit", "withdrawal", "transfer", "payment", "refund"]
    descriptions = [
        "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞", "–°–Ω—è—Ç–∏–µ –Ω–∞–ª–∏—á–Ω—ã—Ö", "–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –¥—Ä—É–≥—É—é –∫–∞—Ä—Ç—É", "–û–ø–ª–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏", 
        "–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤", "–ó–∞—Ä–ø–ª–∞—Ç–∞", "–ü–µ–Ω—Å–∏—è", "–°—Ç–∏–ø–µ–Ω–¥–∏—è", "–î–æ—Ö–æ–¥ –æ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π", "–ö–æ–º–∏—Å—Å–∏—è –±–∞–Ω–∫–∞"
    ]
    
    created_transactions = 0
    
    for i in range(20):
        amount = random.randint(1000, 100000)
        transaction_type = random.choice(transaction_types)
        description = random.choice(descriptions)
        
        days_ago = random.randint(1, 90)
        created_date = datetime.utcnow() - timedelta(days=days_ago)
        
        transaction_id = str(uuid.uuid4())
        
        await db.execute(
            text("""
                INSERT INTO transactions (id, amount, user_id, transaction_type, description, "createdAt", "updatedAt")
                VALUES (:id, :amount, :user_id, :transaction_type, :description, :createdAt, :updatedAt)
            """),
            {
                "id": transaction_id,
                "amount": amount,
                "user_id": user_id,
                "transaction_type": transaction_type,
                "description": description,
                "createdAt": created_date,
                "updatedAt": created_date
            }
        )
        
        created_transactions += 1
        print(f"üí∏ –°–æ–∑–¥–∞–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è #{i+1}: {amount:,} —Ä—É–± ({transaction_type}) - {description}")
    
    await db.commit()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    result = await db.execute(
        text("SELECT COUNT(*) FROM cards WHERE user_id = :user_id"),
        {"user_id": user_id}
    )
    cards_count = result.scalar()
    
    result = await db.execute(
        text("SELECT SUM(amount) FROM cards WHERE user_id = :user_id"),
        {"user_id": user_id}
    )
    total_amount = result.scalar() or 0
    
    result = await db.execute(
        text("SELECT COUNT(*) FROM transactions WHERE user_id = :user_id"),
        {"user_id": user_id}
    )
    transactions_count = result.scalar()
    
    print(f"\nüéâ –ì–æ—Ç–æ–≤–æ!")
    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {name} ({email})")
    print(f"üí≥ –ö–∞—Ä—Ç–æ—á–µ–∫: {cards_count}")
    print(f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {total_amount:,} —Ä—É–±")
    print(f"üìä –°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –Ω–∞ –∫–∞—Ä—Ç–µ: {total_amount // cards_count if cards_count > 0 else 0:,} —Ä—É–±")
    print(f"üí∏ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {transactions_count}")
    
    return True

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    async with AsyncSessionLocal() as db:
        try:
            success = await create_data_for_my_user(db)
            if not success:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            await db.rollback()
        finally:
            await db.close()

if __name__ == "__main__":
    asyncio.run(main())
